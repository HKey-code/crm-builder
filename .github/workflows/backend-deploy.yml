name: Deploy Backend to Azure Web App

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
      - 'libs/**'
      - '.github/workflows/backend-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/backend/**'
      - 'libs/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AZURE_WEBAPP_NAME: new-smart-crm-backend
  AZURE_RESOURCE_GROUP: crm-dev-rg
  AZURE_SLOT: dev
  NODE_VERSION: '22'
  NODE_ENV: 'production'
  FRONTEND_URL: 'https://new-smart-crm-frontend-dev-bacrgwh7egdfavfv.centralus-01.azurewebsites.net'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Install dependencies
      run: |
        echo "üì¶ Installing dependencies..."
        npm ci
        echo "‚úÖ Dependencies installed"

    - name: Generate Prisma client
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        echo "üîß Generating Prisma client..."
        echo "üìÑ Schema path: libs/schema-engine/prisma/schema.prisma"
        npx prisma generate --schema=libs/schema-engine/prisma/schema.prisma
        echo "‚úÖ Prisma client generated successfully"

    - name: Test production build locally
      working-directory: apps/backend
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        NODE_ENV: production
        PORT: 8080
      run: |
        echo "üß™ Testing production build locally..."
        npm run build
        echo "‚úÖ Build completed successfully"
        
        # Test the built application
        echo "üß™ Testing built application..."
        timeout 10s node dist/main.js &
        APP_PID=$!
        sleep 5
        if curl -f http://localhost:8080/health > /dev/null 2>&1; then
          echo "‚úÖ Healthcheck endpoint working"
        else
          echo "‚ùå Healthcheck endpoint failed"
          exit 1
        fi
        kill $APP_PID 2>/dev/null || true
        echo "‚úÖ Production build test completed"

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Clean Azure wwwroot before deployment
      run: |
        echo "üßπ Cleaning wwwroot for slot '${{ env.AZURE_SLOT }}' via Azure CLI..."
        
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --slot ${{ env.AZURE_SLOT }} \
          --settings WEBSITE_RUN_FROM_PACKAGE=0

        az webapp restart \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --slot ${{ env.AZURE_SLOT }}
        
        echo "‚úÖ Azure wwwroot cleaned and app restarted"

    - name: Create clean deployment structure for Oryx
      run: |
        echo "üì¶ Creating clean deployment structure for Oryx..."
        
        # Create a clean deploy directory
        mkdir -p deploy-root
        
        # Create flat Oryx-compatible structure
        echo "üîß Creating flat Oryx-compatible structure..."
        
        # Copy main.ts to root (Oryx expects main.ts at root)
        cp apps/backend/src/main.ts deploy-root/main.ts
        
        # Copy other source files as needed
        cp -r apps/backend/src/* deploy-root/ || true
        
        # Copy config files
        cp apps/backend/package.json deploy-root/
        cp apps/backend/package-lock.json deploy-root/ || true
        cp apps/backend/nest-cli.json deploy-root/ || true
        cp apps/backend/jest.config.js deploy-root/ || true
        
        # Create Oryx-compatible tsconfig.json
        echo "üîß Creating Oryx-compatible tsconfig.json..."
        echo '{
          "compilerOptions": {
            "module": "CommonJS",
            "target": "ES2021",
            "lib": ["ES2021"],
            "moduleResolution": "node",
            "resolveJsonModule": true,
            "esModuleInterop": true,
            "experimentalDecorators": true,
            "emitDecoratorMetadata": true,
            "skipLibCheck": true,
            "strict": true,
            "forceConsistentCasingInFileNames": true,
            "outDir": ".",
            "rootDir": "."
          },
          "include": [
            "*.ts",
            "**/*.ts"
          ],
          "exclude": [
            "node_modules",
            "dist",
            "**/*.spec.ts",
            "**/*.e2e-spec.ts",
            "**/__tests__/**"
          ]
        }' > deploy-root/tsconfig.json
        
        # Fix package.json for flat Oryx structure
        echo "üîß Fixing package.json for flat Oryx structure..."
        node -e "
        const fs = require('fs');
        const pkg = require('./deploy-root/package.json');
        
        // Flat structure: main.ts -> main.js at root
        pkg.main = 'main.js';
        
        // Ensure build and start scripts are correct for flat structure
        pkg.scripts = pkg.scripts || {};
        pkg.scripts.build = 'tsc';
        pkg.scripts.start = 'node main.js';
        pkg.scripts['start:prod'] = 'node main.js';
        
        // Write back the fixed package.json
        fs.writeFileSync('./deploy-root/package.json', JSON.stringify(pkg, null, 2));
        console.log('‚úÖ Package.json fixed for flat Oryx structure');
        console.log('üìÑ Main entry point:', pkg.main);
        console.log('üìÑ Build script:', pkg.scripts.build);
        console.log('üìÑ Start script:', pkg.scripts.start);
        "
        
        # Verify the deployment structure
        echo "üîç Verifying deployment structure..."
        echo "üìÅ Files in deploy-root:"
        ls -la deploy-root/
        echo "üìÑ Package.json in deploy-root:"
        if [ -f "deploy-root/package.json" ]; then
          echo "‚úÖ package.json found in deploy-root"
          echo "üì¶ Dependencies count: $(jq '.dependencies | length' deploy-root/package.json || echo '0')"
          echo "üìÑ Main entry point: $(jq -r '.main // "NOT SET"' deploy-root/package.json)"
          echo "üìÑ Start script: $(jq -r '.scripts.start // "NOT SET"' deploy-root/package.json)"
          echo "üìÑ Build script: $(jq -r '.scripts.build // "NOT SET"' deploy-root/package.json)"
          
          # Validate critical scripts exist
          if [ "$(jq -r '.scripts.build // "NOT SET"' deploy-root/package.json)" = "NOT SET" ]; then
            echo "‚ùå ERROR: Build script missing in package.json!"
            exit 1
          fi
          if [ "$(jq -r '.scripts.start // "NOT SET"' deploy-root/package.json)" = "NOT SET" ]; then
            echo "‚ùå ERROR: Start script missing in package.json!"
            exit 1
          fi
          if [ "$(jq -r '.main // "NOT SET"' deploy-root/package.json)" != "main.js" ]; then
            echo "‚ùå ERROR: Main entry point should be 'main.js' for flat structure!"
            exit 1
          fi
          echo "‚úÖ Package.json validation passed"
        else
          echo "‚ùå ERROR: package.json not found in deploy-root!"
          exit 1
        fi
        
        # Verify main.ts exists at root (flat structure)
        if [ -f "deploy-root/main.ts" ]; then
          echo "‚úÖ main.ts found at root (flat structure)"
        else
          echo "‚ùå ERROR: main.ts not found at root!"
          exit 1
        fi
        
        # Verify tsconfig.json exists and has correct outDir for flat structure
        if [ -f "deploy-root/tsconfig.json" ]; then
          echo "‚úÖ tsconfig.json found in deploy-root"
          echo "üìÑ OutDir: $(jq -r '.compilerOptions.outDir // "NOT SET"' deploy-root/tsconfig.json)"
          if [ "$(jq -r '.compilerOptions.outDir // "NOT SET"' deploy-root/tsconfig.json)" != "." ]; then
            echo "‚ö†Ô∏è  WARNING: OutDir should be '.' for flat Oryx structure"
          fi
        else
          echo "‚ùå ERROR: tsconfig.json not found in deploy-root!"
          exit 1
        fi
        
        echo "‚úÖ Clean deployment structure created successfully for Oryx"

    - name: Configure Azure App Service Environment Variables
      run: |
        echo "üîß Configuring Azure App Service environment variables..."
        
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --slot ${{ env.AZURE_SLOT }} \
          --settings \
          DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          JWT_SECRET="${{ secrets.JWT_SECRET }}" \
          NODE_ENV=production \
          PORT=8080 \
          FRONTEND_URL="${{ env.FRONTEND_URL }}"
        
        echo "‚úÖ Environment variables configured successfully"

    - name: Configure Azure App Service for Oryx Build
      run: |
        echo "üîß Configuring Azure App Service for Oryx build..."
        
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --slot ${{ env.AZURE_SLOT }} \
          --settings \
          SCM_DO_BUILD_DURING_DEPLOYMENT=true \
          ENABLE_ORYX_BUILD=true \
          WEBSITE_RUN_FROM_PACKAGE=1
        
        echo "‚úÖ Azure App Service prepared for Oryx deployment"

    - name: Deploy to Azure Web App (Clean Oryx deployment)
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ./deploy-root
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_BACKEND }}

    - name: Wait for deployment to complete
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        sleep 30
        echo "‚úÖ Deployment wait completed"

    - name: Restart Azure App Service
      run: |
        echo "üîÑ Restarting Azure App Service..."
        az webapp restart \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --slot ${{ env.AZURE_SLOT }}
        echo "‚úÖ Azure App Service restarted"

    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."
        echo "üåê App URL: https://${{ env.AZURE_WEBAPP_NAME }}-${{ env.AZURE_SLOT }}.azurewebsites.net"
        echo "üîß Environment: ${{ env.NODE_ENV }}"
        echo "üì¶ Node version: ${{ env.NODE_VERSION }}"
        echo "üéØ Port: 8080"
        echo "‚úÖ Backend deployment complete"
        echo "üåê App: ${{ env.AZURE_WEBAPP_NAME }}"
        echo "üìã Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
        echo "üéõÔ∏è  Slot: ${{ env.AZURE_SLOT }}" 