name: Deploy Backend to Azure Web App

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
      - 'libs/**'
      - '.github/workflows/backend-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/backend/**'
      - 'libs/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AZURE_WEBAPP_NAME: new-smart-crm-backend
  AZURE_RESOURCE_GROUP: crm-dev-rg
  AZURE_SLOT: dev
  NODE_VERSION: '22'
  NODE_ENV: 'production'
  FRONTEND_URL: 'https://new-smart-crm-frontend-dev-bacrgwh7egdfavfv.centralus-01.azurewebsites.net'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    # 🟢 1. Checkout and Node Setup
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: apps/backend/package-lock.json

    # 🟢 2. Install Dependencies + Generate Prisma
    - name: Install dependencies
      working-directory: apps/backend
      run: |
        echo "📦 Installing dependencies..."
        npm ci
        echo "✅ Dependencies installed"

    - name: Generate Prisma client
      working-directory: apps/backend
      run: |
        echo "🔧 Generating Prisma client..."
        npm run prisma:generate
        echo "✅ Prisma client generated"

    # 🟢 3. Prepare Clean deploy-root Structure
    - name: Create clean deployment structure for Oryx
      run: |
        echo "📦 Creating clean deployment structure for Oryx..."
        
        # Create a clean deploy directory
        mkdir -p deploy-root
        
        # Copy main.ts to root (Oryx expects main.ts at root)
        cp apps/backend/src/main.ts deploy-root/main.ts
        
        # Copy other source files as needed
        cp -r apps/backend/src/* deploy-root/ || true
        
        # Copy config files
        cp apps/backend/package.json deploy-root/
        cp apps/backend/package-lock.json deploy-root/ || true
        cp apps/backend/nest-cli.json deploy-root/ || true
        cp apps/backend/jest.config.js deploy-root/ || true
        
        # Create Oryx-compatible tsconfig.json
        echo "🔧 Creating Oryx-compatible tsconfig.json..."
        echo '{
          "compilerOptions": {
            "module": "CommonJS",
            "target": "ES2021",
            "lib": ["ES2021"],
            "moduleResolution": "node",
            "resolveJsonModule": true,
            "esModuleInterop": true,
            "experimentalDecorators": true,
            "emitDecoratorMetadata": true,
            "skipLibCheck": true,
            "strict": true,
            "forceConsistentCasingInFileNames": true,
            "outDir": ".",
            "rootDir": "."
          },
          "include": [
            "*.ts",
            "**/*.ts"
          ],
          "exclude": [
            "node_modules",
            "dist",
            "**/*.spec.ts",
            "**/*.e2e-spec.ts",
            "**/__tests__/**"
          ]
        }' > deploy-root/tsconfig.json
        
        echo "✅ Clean deployment structure created"

    # 🟢 4. Fix package.json scripts (Node-only)
    - name: Fix package.json for flat Oryx structure
      run: |
        echo "🔧 Fixing package.json for flat Oryx structure..."
        node -e "
        const fs = require('fs');
        const pkg = require('./deploy-root/package.json');
        
        // Flat structure: main.ts -> main.js at root
        pkg.main = 'main.js';
        
        // Ensure build and start scripts are correct for flat structure
        pkg.scripts = pkg.scripts || {};
        pkg.scripts.build = 'tsc';
        pkg.scripts.start = 'node main.js';
        pkg.scripts['start:prod'] = 'node main.js';
        
        // Move @nestjs/cli to dependencies for production build
        if (pkg.devDependencies && pkg.devDependencies['@nestjs/cli']) {
          pkg.dependencies = pkg.dependencies || {};
          pkg.dependencies['@nestjs/cli'] = pkg.devDependencies['@nestjs/cli'];
          delete pkg.devDependencies['@nestjs/cli'];
        }
        
        // Write back the fixed package.json
        fs.writeFileSync('./deploy-root/package.json', JSON.stringify(pkg, null, 2));
        console.log('✅ Package.json fixed for flat Oryx structure');
        console.log('📄 Main entry point:', pkg.main);
        console.log('📄 Build script:', pkg.scripts.build);
        console.log('📄 Start script:', pkg.scripts.start);
        "
        
        # Verify the deployment structure
        echo "🔍 Verifying deployment structure..."
        echo "📁 Files in deploy-root:"
        ls -la deploy-root/
        echo "📄 Package.json in deploy-root:"
        if [ -f "deploy-root/package.json" ]; then
          echo "✅ package.json found in deploy-root"
          echo "📦 Dependencies count: $(jq '.dependencies | length' deploy-root/package.json || echo '0')"
          echo "📄 Main entry point: $(jq -r '.main // "NOT SET"' deploy-root/package.json)"
          echo "📄 Start script: $(jq -r '.scripts.start // "NOT SET"' deploy-root/package.json)"
          echo "📄 Build script: $(jq -r '.scripts.build // \"NOT SET\"' deploy-root/package.json)"
          
          # Validate critical scripts exist
          if [ "$(jq -r '.scripts.build // "NOT SET"' deploy-root/package.json)" = "NOT SET" ]; then
            echo "❌ ERROR: Build script missing in package.json!"
            exit 1
          fi
          if [ "$(jq -r '.scripts.start // "NOT SET"' deploy-root/package.json)" = "NOT SET" ]; then
            echo "❌ ERROR: Start script missing in package.json!"
            exit 1
          fi
          if [ "$(jq -r '.main // "NOT SET"' deploy-root/package.json)" != "main.js" ]; then
            echo "❌ ERROR: Main entry point should be 'main.js' for flat structure!"
            exit 1
          fi
          echo "✅ Package.json validation passed"
        else
          echo "❌ ERROR: package.json not found in deploy-root!"
          exit 1
        fi
        
        # Verify main.ts exists at root (flat structure)
        if [ -f "deploy-root/main.ts" ]; then
          echo "✅ main.ts found at root (flat structure)"
        else
          echo "❌ ERROR: main.ts not found at root!"
          exit 1
        fi
        
        # Verify tsconfig.json exists and has correct outDir for flat structure
        if [ -f "deploy-root/tsconfig.json" ]; then
          echo "✅ tsconfig.json found in deploy-root"
          echo "📄 OutDir: $(jq -r '.compilerOptions.outDir // "NOT SET"' deploy-root/tsconfig.json)"
          if [ "$(jq -r '.compilerOptions.outDir // "NOT SET"' deploy-root/tsconfig.json)" != "." ]; then
            echo "⚠️  WARNING: OutDir should be '.' for flat Oryx structure"
          fi
        else
          echo "❌ ERROR: tsconfig.json not found in deploy-root!"
          exit 1
        fi
        
        echo "✅ Clean deployment structure created successfully for Oryx"

    # 🟡 5. Login to Azure
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # 🟡 6. Set App Service Settings (ORYX-related)
    - name: Configure Azure App Service for Oryx build
      run: |
        echo "🔧 Configuring Azure App Service for Oryx build..."
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --slot ${{ env.AZURE_SLOT }} \
          --settings \
          SCM_DO_BUILD_DURING_DEPLOYMENT=true \
          ENABLE_ORYX_BUILD=true \
          WEBSITE_RUN_FROM_PACKAGE=1
        echo "✅ Azure App Service prepared for Oryx deployment"

    # 🟡 7. Wait 45 seconds (Avoid SCM Restart Conflict)
    - name: Wait before deployment to avoid SCM container restart conflict
      run: |
        echo "⏳ Waiting 45s for Azure App Service to stabilize..."
        sleep 45
        echo "✅ Wait complete - SCM container should be ready for deployment"

    # 🔴 8. Deploy with azure/webapps-deploy@v3
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ./deploy-root
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_BACKEND }}

    # 🟢 9. Restart App Service
    - name: Restart Azure App Service
      run: |
        echo "🔄 Restarting Azure App Service..."
        az webapp restart \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --slot ${{ env.AZURE_SLOT }}
        echo "✅ Azure App Service restarted"

    # 🟢 10. Verify Startup and Logs
    - name: Test health endpoints
      run: |
        echo "🧪 Testing health endpoints..."
        
        # Wait for app to start
        echo "⏳ Waiting 30 seconds for app to start..."
        sleep 30
        
        # Test health endpoints
        echo "🔍 Testing /health endpoint..."
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health || echo "❌ Health endpoint failed"
        
        echo "🔍 Testing /healthcheck endpoint..."
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/healthcheck || echo "❌ Healthcheck endpoint failed"
        
        echo "✅ Health endpoint tests completed" 