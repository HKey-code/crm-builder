name: Deploy Backend to Azure Web App

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
      - 'libs/**'
      - '.github/workflows/backend-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/backend/**'
      - 'libs/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AZURE_WEBAPP_NAME: new-smart-crm-backend
  AZURE_RESOURCE_GROUP: crm-dev-rg
  AZURE_SLOT: dev
  NODE_VERSION: '22'
  NODE_ENV: 'production'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
        
    - name: Debug environment variables
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
      run: |
        echo "üîç Debugging environment variables..."
        echo "DATABASE_URL is ${DATABASE_URL:+SET}"
        echo "JWT_SECRET is ${JWT_SECRET:+SET}"
        echo "Database URL protocol: ${DATABASE_URL%%:*}"
        echo "Database URL length: ${#DATABASE_URL}"
        echo "JWT_SECRET length: ${#JWT_SECRET}"
        echo "NODE_ENV: ${{ env.NODE_ENV }}"
        echo "‚úÖ Environment variables check completed"
        
    - name: Install monorepo dependencies
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        NODE_ENV: production
      run: |
        echo "üî® Setting up Node.js environment..."
        node --version
        npm --version
        
        echo "üì¶ Installing monorepo dependencies from root..."
        npm ci
        
        # Validate Prisma schema exists
        echo "üîç Validating Prisma schema file..."
        test -f libs/schema-engine/prisma/schema.prisma || (echo "‚ùå Prisma schema not found!" && exit 1)
        echo "‚úÖ Prisma schema found"
        
    - name: Generate Prisma client
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        NODE_ENV: production
      run: |
        echo "üîß Generating Prisma client..."
        npx prisma generate --schema=libs/schema-engine/prisma/schema.prisma
        echo "‚úÖ Prisma client generated"
        
    - name: Build backend application
      working-directory: apps/backend
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        NODE_ENV: production
      run: |
        echo "üî® Building backend application..."
        npm run build
        
        # Verify main.js exists
        if [ ! -f "dist/main.js" ]; then
          echo "‚ùå ERROR: dist/main.js not found!"
          ls -la dist/ || echo "dist/ directory not found!"
          exit 1
        fi
        
        echo "‚úÖ dist/main.js found"
        ls -la dist/
        
        # Return to monorepo root for verification
        cd ../..
        
        echo "üîç Verifying build artifacts in monorepo structure..."
        echo "üìã Backend dist contents:"
        ls -la apps/backend/dist/
        
        echo "üîç Verifying main.js exists:"
        if [ -f "apps/backend/dist/main.js" ]; then
          echo "‚úÖ apps/backend/dist/main.js exists"
          echo "üìÑ File size: $(wc -c < apps/backend/dist/main.js) bytes"
        else
          echo "‚ùå ERROR: apps/backend/dist/main.js missing!"
          exit 1
        fi
        
        echo "‚úÖ Backend build completed successfully"
        
    - name: Test production build
      working-directory: apps/backend
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        NODE_ENV: production
      run: |
        echo "üß™ Testing production build..."
        
        # Start the app in background
        timeout 10s node dist/main.js &
        APP_PID=$!
        
        # Wait for app to start
        sleep 5
        
        # Test healthcheck endpoint
        if curl -f http://localhost:8080/health > /dev/null 2>&1; then
          echo "‚úÖ Healthcheck endpoint working"
        else
          echo "‚ùå Healthcheck endpoint failed"
          exit 1
        fi
        
        # Kill the app
        kill $APP_PID 2>/dev/null || true
        echo "‚úÖ Production build test completed"
        
    - name: Prepare deployment package (Clean Oryx approach)
      run: |
        echo "üì¶ Preparing clean deployment package for Oryx..."
        
        # Create a clean deployment directory
        mkdir -p deploy-folder
        
        # Copy built files to deployment folder
        echo "üîß Copying compiled application files..."
        cp -r apps/backend/dist/* deploy-folder/
        
        # Copy complete package.json (with all dependencies)
        echo "üìÑ Copying complete package.json with dependencies..."
        cp apps/backend/package.json deploy-folder/
        
        # Copy package-lock.json for consistent dependency resolution
        echo "üîí Copying package-lock.json for consistent installs..."
        cp package-lock.json deploy-folder/
        
        # Update package.json for production deployment
        echo "üîß Updating package.json for production..."
        cd deploy-folder
        
        # Update main entry point and start script (keep all dependencies)
        node -e "
          const pkg = require('./package.json');
          pkg.main = 'main.js';
          pkg.scripts = pkg.scripts || {};
          pkg.scripts['start:prod'] = 'node main.js';
          pkg.scripts.start = 'node main.js';
          // Remove dev scripts but keep all dependencies
          delete pkg.scripts['start:dev'];
          delete pkg.scripts['build'];
          delete pkg.scripts['test'];
          // Keep all dependencies - Oryx will install them
          console.log('‚úÖ Package.json updated for production');
          console.log('üì¶ Dependencies to be installed by Oryx:');
          Object.keys(pkg.dependencies || {}).forEach(dep => console.log('   - ' + dep));
          require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));
        "
        
        # Verify final deployment structure
        echo "üîç Verifying clean deployment structure..."
        echo "üìÅ Files in deployment folder:"
        ls -la
        echo "üìÑ Package.json scripts:"
        cat package.json | grep -E "(main|start|scripts)" || echo "‚ö†Ô∏è  No start script found"
        echo "üì¶ Dependencies count: $(jq '.dependencies | length' package.json || echo '0')"
        
        # Create clean zip (no node_modules, no source files)
        echo "üì¶ Creating clean deployment zip..."
        zip -r ../release.zip . -x ".*" -x "__pycache__/*" -x "node_modules/*" -x "*.ts" -x "src/*"
        
        echo "üîç Verifying zip contents..."
        unzip -l ../release.zip | head -20
        
        echo "‚úÖ Clean deployment package created successfully"
        echo "üìä Package size: $(du -h ../release.zip | cut -f1)"
        echo "üéØ Oryx will install dependencies and handle runtime setup"
        
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Prepare Azure App Service for Oryx Deployment
      run: |
        echo "üîß Preparing Azure App Service for Oryx deployment..."
        
        # Enable Oryx build system and run from package
        echo "‚úÖ Enabling Oryx build system..."
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --slot ${{ env.AZURE_SLOT }} \
          --settings \
          SCM_DO_BUILD_DURING_DEPLOYMENT=true \
          ENABLE_ORYX_BUILD=true \
          WEBSITE_RUN_FROM_PACKAGE=1
        
        echo "‚úÖ Azure App Service prepared for Oryx deployment"
        
    - name: Deploy to Azure Web App (Clean Oryx deployment)
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: release.zip
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_BACKEND }}
        
    - name: Configure Azure App Service for Clean Oryx Deployment
      run: |
        echo "üîß Configuring Azure App Service for clean Oryx deployment..."
        
        # Enable Oryx build system (default behavior)
        echo "‚úÖ Enabling Oryx build system..."
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --slot ${{ env.AZURE_SLOT }} \
          --settings \
          SCM_DO_BUILD_DURING_DEPLOYMENT=true \
          ENABLE_ORYX_BUILD=true \
          WEBSITE_RUN_FROM_PACKAGE=1
        
        # Set startup command to use npm start
        echo "üéØ Setting startup command..."
        az webapp config set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --slot ${{ env.AZURE_SLOT }} \
          --startup-file "npm start"
        
        echo "‚úÖ Azure App Service configured for clean Oryx deployment"
        
    - name: Configure Azure App Service Environment Variables
      run: |
        echo "üîß Note: Environment variables need to be configured manually in Azure App Service"
        echo "üìã Please configure these environment variables in Azure App Service settings:"
        echo "   - DATABASE_URL: ${{ secrets.DATABASE_URL }}"
        echo "   - JWT_SECRET: ${{ secrets.JWT_SECRET }}"
        echo "   - NODE_ENV: production"
        echo "üîó Go to: Azure Portal > App Service > Configuration > Application settings"
        
    - name: Verify deployment
      run: |
        echo "üîç Verifying backend deployment..."
        echo "App Service: ${{ env.AZURE_WEBAPP_NAME }}"
        echo "Environment: ${{ github.event.inputs.environment || 'dev' }}"
        echo "‚úÖ Backend deployment completed successfully" 